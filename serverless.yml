service: serverless
frameworkVersion: "3"

plugins:
  - serverless-dotenv-plugin
  - serverless-offline
  - serverless-middleware

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-west-2
  memorySize: 128
  stage: ${opt:stage, 'dev'}

functions:
  # /users
  createAUser:
    handler: src/handlers/user/createAUser.handler
    events:
      - httpApi:
          path: /users
          method: POST
  # /auth
  login:
    handler: src/handlers/auth/login.handler
    events:
      - httpApi:
          path: /auth/login
          method: POST
  refresh:
    handler: src/handlers/auth/refresh.handler
    events:
      - httpApi:
          path: /auth/refresh
          method: POST
  # /account
  sendVerificationEmail:
    handler: src/handlers/account/sendVerificationEmail.handler
    events:
      - httpApi:
          path: /account/verification
          method: POST
  verifyEmailToken:
    handler: src/handlers/account/verifyEmailToken.handler
    events:
      - httpApi:
          path: /account/verification/{verificationToken}
          method: GET
  resetPassword:
    handler: src/handlers/account/resetPassword.handler
    events:
      - httpApi:
          path: /account/resetPassword
          method: POST
  changePassword:
    middleware:
      pre:
        - src/middleware/authenticate.handler
    handler: src/handlers/account/changePassword.handler
    events:
      - httpApi:
          path: /account/changePassword
          method: POST
  # clubs
  getClubsNearCoordinates:
    middleware:
      pre:
        - src/middleware/authenticate.handler
    handler: src/handlers/club/getClubsNearCoordinates.handler
    events:
      - httpApi:
          path: /clubs
          method: GET
  createAClub:
    middleware:
      pre:
        - src/middleware/authenticate.handler
    handler: src/handlers/club/createAClub.handler
    events:
      - httpApi:
          path: /clubs
          method: POST
  getAClub:
    middleware:
      pre:
        - src/middleware/authenticate.handler
    handler: src/handlers/club/getAClub.handler
    events:
      - httpApi:
          path: /clubs/{clubId}
          method: GET
  updateAClub:
    middleware:
      pre:
        - src/middleware/authenticate.handler
        - src/middleware/authorizeClubAdmin.handler
    handler: src/handlers/club/updateAClub.handler
    events:
      - httpApi:
          path: /clubs/{clubId}
          method: PATCH
  deleteAClub:
    middleware:
      pre:
        - src/middleware/authenticate.handler
        - src/middleware/authorizeClubAdmin.handler
    handler: src/handlers/club/deleteAClub.handler
    events:
      - httpApi:
          path: /clubs/{clubId}
          method: DELETE
  # club join or leave
  joinAClub:
    middleware:
      pre:
        - src/middleware/authenticate.handler
    handler: src/handlers/club/joinAClub.handler
    events:
      - httpApi:
          path: /clubs/{clubId}/join
          method: PATCH
  leaveAClub:
    middleware:
      pre:
        - src/middleware/authenticate.handler
        - src/middleware/authorizeClubUser.handler
    handler: src/handlers/club/leaveAClub.handler
    events:
      - httpApi:
          path: /clubs/{clubId}/leave
          method: PATCH
  # club members
  addAClubMember:
    middleware:
      pre:
        - src/middleware/authenticate.handler
        - src/middleware/authorizeClubAdmin.handler
    handler: src/handlers/club/addAClubMember.handler
    events:
      - httpApi:
          path: /clubs/{clubId}/members
          method: POST
  changeAClubMemberRole:
    middleware:
      pre:
        - src/middleware/authenticate.handler
        - src/middleware/authorizeClubAdmin.handler
    handler: src/handlers/club/changeAClubMemberRole.handler
    events:
      - httpApi:
          path: /clubs/{clubId}/members
          method: PATCH
  removeAClubMember:
    middleware:
      pre:
        - src/middleware/authenticate.handler
        - src/middleware/authorizeClubAdmin.handler
    handler: src/handlers/club/removeAClubMember.handler
    events:
      - httpApi:
          path: /clubs/{clubId}/members
          method: DELETE
  # club rides
  getClubRides:
    middleware:
      pre:
        - src/middleware/authenticate.handler
        - src/middleware/authorizeClubUser.handler
    handler: src/handlers/rides/getClubRides.handler
    events:
      - httpApi:
          path: /clubs/{clubId}/rides
          method: GET
  createAClubRide:
    middleware:
      pre:
        - src/middleware/authenticate.handler
        - src/middleware/authorizeClubEditor.handler
    handler: src/handlers/rides/createAClubRide.handler
    events:
      - httpApi:
          path: /clubs/{clubId}/rides
          method: POST
  updateAClubRide:
    middleware:
      pre:
        - src/middleware/authenticate.handler
        - src/middleware/authorizeClubEditor.handler
    handler: src/handlers/rides/updateAClubRide.handler
    events:
      - httpApi:
          path: /clubs/{clubId}/rides/{rideId}
          method: PATCH
  deleteAClubRide:
    middleware:
      pre:
        - src/middleware/authenticate.handler
        - src/middleware/authorizeClubEditor.handler
    handler: src/handlers/rides/deleteAClubRide.handler
    events:
      - httpApi:
          path: /clubs/{clubId}/rides/{rideId}
          method: DELETE
  # open rides
  getOpenRidesNearCoordinates:
    middleware:
      pre:
        - src/middleware/authenticate.handler
    handler: src/handlers/rides/getOpenRidesNearCoordinates.handler
    events:
      - httpApi:
          path: /rides
          method: GET
  createAnOpenRide:
    middleware:
      pre:
        - src/middleware/authenticate.handler
    handler: src/handlers/rides/createAnOpenRide.handler
    events:
      - httpApi:
          path: /rides
          method: POST
  updateAnOpenRide:
    middleware:
      pre:
        - src/middleware/authenticate.handler
    handler: src/handlers/rides/updateAnOpenRide.handler
    events:
      - httpApi:
          path: /rides/{rideId}
          method: PATCH
  deleteAnOpenRide:
    middleware:
      pre:
        - src/middleware/authenticate.handler
    handler: src/handlers/rides/deleteAnOpenRide.handler
    events:
      - httpApi:
          path: /rides/{rideId}
          method: DELETE
